#+TITLE:The Doomed Configuration
#+DESCRIPTION: A detailed setup for Emacs using Doom Emacs configuration framework
#+AUTHOR: Jamie van Dyke
#+EMAIL: me@fearof.fish

* My Literate Emacs Configuration

** About my config
I have built this from a single source

** Investigating issues
If you, like me, try new things with your config until it breaks, is important that we have some tools to help us figure out what is going on. Regardless if you'll use this configuration /as is/, or start yours from scratch, and copy the tidbits that may interest you. Before you start know these things:

To get a better sense of what is going on, start Emacs from terminal with the =--debug-init= flag:

#+caption: Command to start emacs in debug mode
#+begin_src shell :tangle no
emacs --debug-init
#+end_src

This will stop Emacs on the first error and print the stack trace for it. As of now, this might not be useful beyond reporting bugs, nevertheless, it's important you keep it in your mind!

Another issue that may show up, is slowness, specially after adding packages. This is not uncommon since Emacs startup time is sensitive to package loading.

What I recommend doing, is to install a package called [[https://github.com/kekeimiku/benchmark-init-el][~benchmark-init-el~]] that specializes on benchmarking (notice that I'm not using the [[https://github.com/dholm/benchmark-init-el][official repository]] for ~benchmark-init-el~, but a fork that fixed a bug when using it with Emacs 28+), and use it, when you have the need:

#+caption: $DOOMDIR/packages.el
#+begin_src emacs-lisp :tangle packages.el
(package! benchmark-init
  :recipe (:host github
           :repo "kekeimiku/benchmark-init-el"))
#+end_src

Check my =init.el= file on the [[Appendix][Appendix]], to see how I hook up benchmarking to the =--debug-init= flag.

After starting Emacs with the =--debug-init= flag, you can check the call tree with the =M-x benchmark-init/show-durations-tree= command.

*** Sources:
- [[https://github.com/Townk/doom-emacs-private/blob/master/config.org][Thiago Alves Literate Config]]

*** Identity
Who am I?

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq user-full-name "Jamie van Dyke"
      user-mail-address "me@fearof.fish")
#+end_src

*** Dashboard
Doom Emacs offers a lightweight dashboard, that serves as the landing page for Emacs.

I really like the idea of a dashboard and I like even more what Doom offers, but, the ASCII art for its logo is not something I'm affectionate with.

In order to replace the ASCII art with something more pleasant and thematic, I like to add a small picture on the dashboard:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-dir (expand-file-name "assets" doom-private-dir)
      +doom-dashboard-banner-file "doom.png"
      +doom-dashboard-banner-padding '(0 . 4))
#+end_src

I love the style of this image so much, that it is, besides my dashboard image, my Emacs icon as well. The author of this beauty is [[https://github.com/eccentric-j/doom-icon][Jay Zawrotny]], feel free to send him an accolade!

#+begin_center
#+caption: My favorite contender for a Doom Emacs logo
#+name: fig:caco-demon
[[./assets/doom.png]]
#+end_center

*** Key modifiers
]]Since I use a Mac as my primary computer, I need to adjust its control keys to match a good set of control keys on Emacs:

#+caption: macOS key mappings
#+name: tbl:macos-keys
| macOS Key  | Emacs Key |
|------------+-----------|
| ⌘ (=cmd=)    | ='super=    |
| ⌃ (=ctrl=)   | ='control=  |
| ⌥ (=option=) | ='meta=     |

Emacs expose three variables to allow you to make these adjustments:

- ~mac-command-modifier~
- ~mac-control-modifier~
- ~mac-option-modifier~

To adjust this values according to table [[tbl:macos-keys]], set each one of them to the symbol described on the column =Emacs Key=:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq mac-command-modifier 'super
      mac-control-modifier 'control
      mac-option-modifier  'meta)
#+end_src

*** Indentation
On this section, I will ask the reader to disagree on disagree, and set aside the almost religious subject of tabs versus spaces.

I prefer to always indent my files with =2= spaces with some rare exceptions for certain languages. To make Emacs use =2= spaces to indent by default, set the variable ~tab-width~ to =2=:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src

And to force emacs to always use spaces instead of tabs, set the ~indent-tabs-mode~ variable to =nil=:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

*** Line wrapping
Until the writing of this document, I had the opinion that /soft wrap/ was evil, and it had no place on any editor. Since then, I learned to appreciate /soft wrap/ for prose, and later in this document, you will see all the other setup around /soft wrap/ and have an idea why I was so against it.

To prevent Emacs from wrapping your text as it goes over the size of the screen, set the variable ~truncate-lines~ to a non-=nil= value:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

** Inline completion

Add github co-pilot instead of TabNine (previous)

#+caption: $DOOMDIR/packages.el
#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

Accept completion from copilot and fallback to company, first unbinding keys that clash:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp :tangle no
#+end_src

Then bind the keys to copilot:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
#+end_src

** Spelling

I remove spelling as it isn't needed for me.

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'spell-fu-mode)
#+end_src

** Useful line numbers
A long time ago, I read on some Vim mailing list, an opinion on how line numbers should behave on different editing modes (if you know who is the original author of such idea, please let me know, so I can give credit where credit is due). Since on normal mode is pretty useful to know the line count from the cursor until some target text, it makes more sense to have the =relative number= shown on the gutter, but when I'm editing the buffer, is nice to have a sense of size by looking to the line numbers.

So, I can describe this behavior as follows:

- When on normal mode, show relative line numbers;
- When on insert mode, show absolute line numbers;

To achieve this, I need a function that turns the /absolute/ line number when line numbers are visible:

#+caption: $DOOMDIR/autoload/editor.el
#+begin_src emacs-lisp :tangle autoload/editor.el
;;;###autoload
(defun my-line-number-absolute-h ()
  "If line numbers are visible, set the current line number type to `absolute.'"
  (if display-line-numbers
      (setq display-line-numbers t)))
#+end_src

#+RESULTS:
: my-line-number-absolute-h

And another function to put the line numbers on /relative mode/ (but again, only if line numbers are visible):

#+caption: $DOOMDIR/autoload/editor.el
#+begin_src emacs-lisp :tangle autoload/editor.el
;;;###autoload
(defun my-line-number-visual-h ()
  "If line numbers are visible, set the current line number type to `visual'"
  (if display-line-numbers
      (setq display-line-numbers 'visual)))
#+end_src

With those functions created, after loading Evil, I can hook them to a mode switch:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(after! evil
  (add-hook! '(evil-emacs-state-entry-hook
               evil-insert-state-entry-hook) 'my-line-number-absolute-h)
  (add-hook! '(evil-emacs-state-exit-hook
               evil-insert-state-exit-hook) 'my-line-number-visual-h))
#+end_src

To finalize, I want to make line numbers visible on any programming mode:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(after! evil
  (setq-hook! 'prog-mode-hook display-line-numbers-type 'visual))
#+end_src

** Ruby Indenting

I don't agree with the ruby indenting rules, and ruby-mode lets us customise with some variables.

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq ruby-align-to-stmt-keywords 't
      ruby-align-chained-calls nil
      ruby-block-indent nil)
#+end_src

*** Evil-String-Inflection
I've been on situations where I realized that I used /camelCase/ for all my variables, where the standard coding style of the language, request to use /snake_case/ style. There are packages available, that allow you to cycle through all case styles on a given word.

I found the [[https://github.com/akicho8/string-inflection][~string-inflection~]] package to be one of the best available. There is the package [[https://github.com/ninrod/evil-string-inflection][~evil-string-inflection~ ]]to integrate with Evil, but it turns out to not work as expected, so I will have to configure Evil integration myself. Let's start with the package itself:

#+caption: $DOOMDIR/packages.el
#+begin_src emacs-lisp :tangle packages.el
(package! string-inflection)
#+end_src

As with the ~matchit~ package, I'll defer its loading until we need it, but different from ~matchit~, I have to defer it using an alternative approach. I will make the package load on the first invocation of one of its main commands:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-toggle
             string-inflection-camelcase
             string-inflection-lower-camelcase
             string-inflection-kebab-case
             string-inflection-underscore
             string-inflection-capital-underscore
             string-inflection-upcase))
#+end_src

I want to have a rich set of mappings for this package, so I will add one key for each inflection plus a toggle and a cycle:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map! :leader :prefix ("g~" . "string inflection")
      :desc "cycle" "~" #'string-inflection-all-cycle
      :desc "toggle" "t" #'string-inflection-toggle
      :desc "CamelCase" "c" #'string-inflection-camelcase
      :desc "downCase" "d" #'string-inflection-lower-camelcase
      :desc "kebab-case" "k" #'string-inflection-kebab-case
      :desc "under_score" "_" #'string-inflection-underscore
      :desc "Upper_Score" "u" #'string-inflection-capital-underscore
      :desc "UP_CASE" "U" #'string-inflection-upcase)
#+end_src

In order to create a nicer workflow, I want to access the previous shortcuts by pressing the same key after the initial inflection. For instance, I want to press =SPC g ~= to start the inflection, and keep pressing just =~= to cycle through all the other inflections.

To make ~string-inflection~ to work nice with Evil, I will create an /Evil operator/ to allow me to change the string inflection of a target text object:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(after! evil
  (evil-define-operator my-evil-operator-string-inflection (beg end _type)
    "Define a new evil operator that cicles underscore -> UPCASE -> CamelCase."
    :move-point nil
    (interactive "<R>")
    (string-inflection-all-cycle)
    (setq evil-repeat-info (list [?g ?~])))

  (define-key evil-normal-state-map (kbd "g~") 'my-evil-operator-string-inflection))
#+end_src

** Ruby Hash Syntax Toggle

I like to be able to switch between hash syntaxes when fixing old code

#+caption: $DOOMDIR/packages.el
#+begin_src emacs-lisp :tangle packages.el
(package! ruby-hash-syntax)
#+end_src

** Keybindings
Since I decided to write this configuration, I also decided to try to use the standard Doom key bindings as much as possible, and for the most part of it, I'm not having as much problem as I expected. There are three main areas where I still like to define my own bindings.

*** Window navigation
A while ago, I configured Vim to move the cursor from one window to another using the standard movements keys (=h=, =j=, =k=, and =l=) while keeping =Ctrl= pressed. I got so used to these shortcuts, that I can't live without it anymore.

The good news is that, on most cases, there is no conflict between features I use and these shortcuts, and on the cases that a conflict exists, there are reasonable options to work around these limitations.

The first step to achieve a global window navigation shortcuts, is to clean the target keys from any keymap that might bind them to a command:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map!
 (:after outline
  (:map outline-mode-map
   :gn "C-h" nil
   :gn "C-j" nil
   :gn "C-k" nil
   :gn "C-l" nil)))
#+end_src

After that, I can bind these keys to the target window movements to the proper window commands:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map!
  :gn "C-h" #'evil-window-left
  :gn "C-j" #'evil-window-down
  :gn "C-k" #'evil-window-up
  :gn "C-l" #'evil-window-right)
#+end_src

Some other modes don't play nice with this particular key bindings I choose, and I have to adjust them accordingly. This is the case of the =Info-mode=, where =C-j= and =C-k= are the keys to navigate forward and backwards on nodes. The solution for me is to bind those commands to other keys, and configure the proper window navigation:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map! :after info
      :map Info-mode-map
      :gn "s-k" #'Info-backward-node
      :gn "s-j" #'Info-forward-node
      :gn "C-k" #'evil-window-up
      :gn "C-j" #'evil-window-down)
#+end_src

Thanks to a post by Dario over at https://codingstruggles.com/emacs/resizing-windows-doom-emacs.html I can also resize easily as he says "Now we can just press SPC w SPC and then hold one of h, j, k or l to resize the current window."

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(defhydra doom-window-resize-hydra (:hint nil)
  "
             _k_ increase height
_h_ decrease width    _l_ increase width
             _j_ decrease height
"
  ("h" evil-window-decrease-width)
  ("j" evil-window-increase-height)
  ("k" evil-window-decrease-height)
  ("l" evil-window-increase-width)

  ("q" nil))

  (map!
    (:prefix "w"
      :desc "Hydra resize" :n "SPC" #'doom-window-resize-hydra/body))
#+end_src

*** Personal shortcuts
Key bindings in this section are purely personal choice. Feel free to give them a try if you want, but if you're used to Doom Emacs already, my suggestion is to skip this section.

#+begin_center
◆
#+end_center

The first keymap group I like to add custom shortcuts is the multiple cursors. When I first heard about multiple cursors, was on a demo of the [[https://macromates.com/][TextMate]] editor. I got so impressed by it that this feature was one of the first things I would search on an editor. Fast forwarding to January 2008, I was watching yet another demo of a brand-new editor, when the person showing off the features, demonstrated the multiple cursors. This editor was [[https://www.sublimetext.com][Sublime Text]], and I couldn't resist the chance to give it a try. For reasons of the brain (at least my brain), the shortcuts defined to manipulate multiple cursors got engraved in my memory, and recently, I decide to stop fighting against it and embrace! So these are the shortcuts (which might be different from the current shortcuts in Sublime) that I got /used to/:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map!
 :gn "s-d" #'evil-mc-make-and-goto-next-match
 :gn "s-u" #'evil-mc-skip-and-goto-prev-cursor
 :gn "s-n" #'evil-mc-skip-and-goto-next-match
 :gn "s-g" #'evil-mc-make-all-cursors
 :gn "C-M-k" #'evil-mc-make-cursor-move-prev-line
 :gn "C-M-j" #'evil-mc-make-cursor-move-next-line)
#+end_src

*** Theme
Trying out monokai pro

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-palenight)
(setq doom-theme 'doom-monokai-pro)
#+end_src

And because I like visual cues on my editor, I will turn on the ability to display *bold* and /italic/ faces for the theme:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+end_src

*** Typography
:PROPERTIES:
:CUSTOM_ID: prefs-typography
:END:

Fonts I like:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'light)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 16))
#+end_src

*** Search Highlights

After searching, I'd like to disable the highlight of the words, like =set :noh= in vim.

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
  (map! :leader
      :desc "Toggle search highlight"
      "t h"
      #'evil-ex-nohighlight)
#+end_src


*** Search All Windows

When I'm searching with avy, I want to search all visible windows.

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
  (setq avy-all-windows t)
#+end_src

** LSP

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(use-package! lsp-ui
  :defer t
  :custom
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable t))
#+end_src

** Project configuration
I set up the projectile search path for my projects

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(setq projectile-project-search-path '("/a/" ))
#+end_src

** Terminal
In general, I really like the setup Doom has for the terminal.

Some aliases that I'm used to when working on the terminal:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(after! eshell
  (set-eshell-alias!
   "d"     "dired $1"
   "edit"  "find-file-other-window $1"
   "em"    "find-file-other-window $1"
   "emacs" "find-file-other-window $1"
   "f"     "find-file $1"
   "gc"    "magit-commit $1"
   "gl"    "(call-interactively 'magit-log-current)"
   "gst"   "magit-status $1"
   "ls"    "exa --group-directories-first --color always -F $1"
   "la"    "exa --group-directories-first --color always -F -a $1"
   "ll"    "exa --group-directories-first --color always -F -l -h --git $1"
   "lla"   "exa --group-directories-first --color always -F -a -l -h --git $1"
   "rg"    "rg --color=always $*"
   "up"    "eshell-up $1"
   "pk"    "eshell-up-peek $1"
   "vi"    "find-file-other-window $1"
   "vim"   "find-file-other-window $1"))
#+end_src

#+RESULTS:

Window navigation mapping:

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(map! :after eshell
      (:map eshell-mode-map
       :in "C-h" #'evil-window-left
       :in "C-j" #'evil-window-down
       :in "C-k" #'evil-window-up
       :in "C-l" #'evil-window-right))
#+end_src

#+caption: $DOOMDIR/config.el
#+begin_src emacs-lisp
(set-popup-rule! "^\\*doom:\\(?:v?term\\|e?shell\\)-popup"
  :slot 2   :vslot -1     :side 'bottom  :width 110 :height 0.4
  :select t :modeline nil :autosave nil  :ttl nil   :quit nil)
#+end_src

